message LLVMEntry {
    optional uint64 type = 1;
    optional uint64 pc = 12;

    optional string called_func_name = 13;

    //address we're loading or storing from
	optional uint64 address = 2;

    //value that's loaded, stored, or returned
    optional uint64 value = 3;
	optional uint64 num_bytes = 4;
	optional uint64 tb_num = 5;

    // See FunctionCode.h for all the address types
    optional uint32 addr_type = 6;
    optional uint32 cpustate_offset = 7;

	// Used to select the target for Branch, Select, and Switch instructions 
	optional uint32 condition = 8;

    // A phi instruction has format phi i1 [val, %label1] [val, label2]
    // in align_function, record the argument index (1 for label1, etc) of the incoming basic block,
	optional uint32 phi_index = 9; 

    //flags that tell us whether we're in a hardware int, exception, dynamic loader, etc...
    //So the slicer can excise some parts 
    optional uint32 flags = 10;

    optional string vma_name = 11;
    optional uint64 vma_base = 14;
}

optional LLVMEntry llvmEntry = 30;

// will also need func names, bb boundaries, metadata, 
